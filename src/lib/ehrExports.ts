/**
 * Smart EHR Export System
 * Provides formatted exports for major EHR systems (Epic, Cerner, AllScripts, etc.)
 */

export interface EHRSystem {
  id: string;
  name: string;
  format: 'epic' | 'cerner' | 'allscripts' | 'nextgen' | 'generic';
  description: string;
  icon: string;
}

export interface ExportOptions {
  includeTimestamp: boolean;
  includeSignature: boolean;
  includeMetadata: boolean;
  formatStyle: 'compact' | 'detailed' | 'clinical';
  customHeader?: string;
  customFooter?: string;
}

export interface ExportResult {
  content: string;
  filename: string;
  format: string;
  size: number;
  preview: string;
}

export interface ExportMetadata {
  template: string;
  timestamp: string;
  redactionCount?: number;
  timeSaved?: number;
  nurseSignature?: string;
  department?: string;
  patientId?: string; // Only if not redacted
}

class EHRExportService {
  private ehrSystems: EHRSystem[] = [
    {
      id: 'epic',
      name: 'Epic',
      format: 'epic',
      description: 'Epic MyChart and EpicCare',
      icon: 'üè•',
    },
    {
      id: 'cerner',
      name: 'Cerner',
      format: 'cerner',
      description: 'Cerner PowerChart and HealtheLife',
      icon: 'üíª',
    },
    {
      id: 'allscripts',
      name: 'AllScripts',
      format: 'allscripts',
      description: 'AllScripts Professional EHR',
      icon: 'üìã',
    },
    {
      id: 'nextgen',
      name: 'NextGen',
      format: 'nextgen',
      description: 'NextGen Healthcare EHR',
      icon: '‚ö°',
    },
    {
      id: 'generic',
      name: 'Generic',
      format: 'generic',
      description: 'Universal EHR format',
      icon: 'üìÑ',
    },
  ];

  /**
   * Get available EHR systems
   */
  getEHRSystems(): EHRSystem[] {
    return [...this.ehrSystems];
  }

  /**
   * Export note for specific EHR system
   */
  async exportForEHR(
    note: string,
    ehrSystem: string,
    metadata: ExportMetadata,
    options: ExportOptions = this.getDefaultOptions()
  ): Promise<ExportResult> {
    const system = this.ehrSystems.find(ehr => ehr.id === ehrSystem);
    if (!system) {
      throw new Error(`Unknown EHR system: ${ehrSystem}`);
    }

    const formattedContent = this.formatForEHR(note, system.format, metadata, options);
    const filename = this.generateFilename(metadata, system.format);
    const preview = this.generatePreview(formattedContent);

    return {
      content: formattedContent,
      filename,
      format: system.format,
      size: new Blob([formattedContent]).size,
      preview,
    };
  }

  /**
   * Format content for specific EHR system
   */
  private formatForEHR(
    note: string,
    format: EHRSystem['format'],
    metadata: ExportMetadata,
    options: ExportOptions
  ): string {
    switch (format) {
      case 'epic':
        return this.formatForEpic(note, metadata, options);
      case 'cerner':
        return this.formatForCerner(note, metadata, options);
      case 'allscripts':
        return this.formatForAllScripts(note, metadata, options);
      case 'nextgen':
        return this.formatForNextGen(note, metadata, options);
      case 'generic':
        return this.formatGeneric(note, metadata, options);
      default:
        return this.formatGeneric(note, metadata, options);
    }
  }

  /**
   * Epic-specific formatting
   */
  private formatForEpic(note: string, metadata: ExportMetadata, options: ExportOptions): string {
    const header = options.includeTimestamp ? 
      `=== NURSING NOTE - ${metadata.template.toUpperCase()} ===\n` +
      `Date/Time: ${metadata.timestamp}\n` +
      `Generated by: NovaCare\n` : '';

    const footer = options.includeSignature ? 
      `\n\n---\nNurse Signature: ${metadata.nurseSignature || '[NURSE NAME]'}\n` +
      `Time Saved: ${metadata.timeSaved || 0} minutes\n` +
      `PHI Protected: ${metadata.redactionCount || 0} elements\n` : '';

    // Epic prefers structured format with clear sections
    const formattedNote = this.structureNoteForEpic(note, metadata.template);

    return `${header}${formattedNote}${footer}`;
  }

  /**
   * Cerner-specific formatting
   */
  private formatForCerner(note: string, metadata: ExportMetadata, options: ExportOptions): string {
    const header = options.includeTimestamp ? 
      `NURSING DOCUMENTATION\n` +
      `Template: ${metadata.template}\n` +
      `Date/Time: ${metadata.timestamp}\n` : '';

    const footer = options.includeSignature ? 
      `\n\nSIGNATURE: ${metadata.nurseSignature || '[NURSE NAME]'}\n` +
      `AUTOMATION: NovaCare (${metadata.timeSaved || 0} min saved)\n` : '';

    // Cerner uses specific formatting conventions
    const formattedNote = this.structureNoteForCerner(note, metadata.template);

    return `${header}${formattedNote}${footer}`;
  }

  /**
   * AllScripts-specific formatting
   */
  private formatForAllScripts(note: string, metadata: ExportMetadata, options: ExportOptions): string {
    const header = options.includeTimestamp ? 
      `AllScripts Professional EHR\n` +
      `Nursing Note - ${metadata.template}\n` +
      `${metadata.timestamp}\n` +
      `Generated by NovaCare\n\n` : '';

    const footer = options.includeSignature ? 
      `\n\nSignature: ${metadata.nurseSignature || '[NURSE NAME]'}\n` +
      `Documentation Time Saved: ${metadata.timeSaved || 0} minutes\n` : '';

    return `${header}${note}${footer}`;
  }

  /**
   * NextGen-specific formatting
   */
  private formatForNextGen(note: string, metadata: ExportMetadata, options: ExportOptions): string {
    const header = options.includeTimestamp ? 
      `NextGen Healthcare EHR\n` +
      `Clinical Documentation\n` +
      `Template: ${metadata.template}\n` +
      `Date: ${metadata.timestamp}\n\n` : '';

    const footer = options.includeSignature ? 
      `\n\nNurse: ${metadata.nurseSignature || '[NURSE NAME]'}\n` +
      `Efficiency Gain: ${metadata.timeSaved || 0} minutes\n` : '';

    return `${header}${note}${footer}`;
  }

  /**
   * Generic EHR formatting
   */
  private formatGeneric(note: string, metadata: ExportMetadata, options: ExportOptions): string {
    const header = options.includeTimestamp ? 
      `NURSING DOCUMENTATION\n` +
      `Template: ${metadata.template}\n` +
      `Date: ${metadata.timestamp}\n` +
      `Generated by NovaCare\n\n` : '';

    const footer = options.includeSignature ? 
      `\n\n---\nNurse: ${metadata.nurseSignature || '[NURSE NAME]'}\n` +
      `Time Saved: ${metadata.timeSaved || 0} minutes\n` +
      `Privacy: ${metadata.redactionCount || 0} PHI elements protected\n` : '';

    return `${header}${note}${footer}`;
  }

  /**
   * Structure note for Epic format
   */
  private structureNoteForEpic(note: string, template: string): string {
    // Epic prefers bullet points and clear sections
    const lines = note.split('\n');
    const structured = lines.map(line => {
      if (line.trim().startsWith('S:') || line.trim().startsWith('Subjective:')) {
        return `‚Ä¢ SUBJECTIVE: ${line.replace(/^(S:|Subjective:)\s*/i, '')}`;
      } else if (line.trim().startsWith('O:') || line.trim().startsWith('Objective:')) {
        return `‚Ä¢ OBJECTIVE: ${line.replace(/^(O:|Objective:)\s*/i, '')}`;
      } else if (line.trim().startsWith('A:') || line.trim().startsWith('Assessment:')) {
        return `‚Ä¢ ASSESSMENT: ${line.replace(/^(A:|Assessment:)\s*/i, '')}`;
      } else if (line.trim().startsWith('P:') || line.trim().startsWith('Plan:')) {
        return `‚Ä¢ PLAN: ${line.replace(/^(P:|Plan:)\s*/i, '')}`;
      } else if (line.trim().length > 0) {
        return `‚Ä¢ ${line.trim()}`;
      }
      return line;
    });

    return structured.join('\n');
  }

  /**
   * Structure note for Cerner format
   */
  private structureNoteForCerner(note: string, template: string): string {
    // Cerner uses specific formatting with clear headers
    const lines = note.split('\n');
    const structured = lines.map(line => {
      if (line.trim().startsWith('S:') || line.trim().startsWith('Subjective:')) {
        return `SUBJECTIVE:\n${line.replace(/^(S:|Subjective:)\s*/i, '')}`;
      } else if (line.trim().startsWith('O:') || line.trim().startsWith('Objective:')) {
        return `OBJECTIVE:\n${line.replace(/^(O:|Objective:)\s*/i, '')}`;
      } else if (line.trim().startsWith('A:') || line.trim().startsWith('Assessment:')) {
        return `ASSESSMENT:\n${line.replace(/^(A:|Assessment:)\s*/i, '')}`;
      } else if (line.trim().startsWith('P:') || line.trim().startsWith('Plan:')) {
        return `PLAN:\n${line.replace(/^(P:|Plan:)\s*/i, '')}`;
      }
      return line;
    });

    return structured.join('\n\n');
  }

  /**
   * Generate filename for export
   */
  private generateFilename(metadata: ExportMetadata, format: string): string {
    const timestamp = new Date().toISOString().split('T')[0];
    const template = metadata.template.toLowerCase();
    return `nursing_note_${template}_${timestamp}_${format}.txt`;
  }

  /**
   * Generate preview of export
   */
  private generatePreview(content: string): string {
    const lines = content.split('\n');
    const preview = lines.slice(0, 5).join('\n');
    return preview + (lines.length > 5 ? '\n...' : '');
  }

  /**
   * Get default export options
   */
  getDefaultOptions(): ExportOptions {
    return {
      includeTimestamp: true,
      includeSignature: true,
      includeMetadata: true,
      formatStyle: 'clinical',
    };
  }

  /**
   * Copy to clipboard with EHR-specific formatting
   */
  async copyToClipboard(content: string): Promise<boolean> {
    try {
      await navigator.clipboard.writeText(content);
      return true;
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
      return false;
    }
  }

  /**
   * Download as file
   */
  downloadFile(content: string, filename: string): void {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }

  /**
   * Export as PDF (using jsPDF)
   */
  async exportAsPDF(content: string, filename: string): Promise<void> {
    // This would integrate with jsPDF for PDF generation
    // For now, we'll use a simple text-to-PDF conversion
    const pdfContent = `NovaCare - Clinical Documentation\n\n${content}`;
    
    // Create a simple PDF-like text file
    const blob = new Blob([pdfContent], { type: 'application/pdf' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename.replace('.txt', '.pdf');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }

  /**
   * Validate EHR integration
   */
  validateEHRIntegration(ehrSystem: string): { valid: boolean; message: string } {
    const system = this.ehrSystems.find(ehr => ehr.id === ehrSystem);
    
    if (!system) {
      return { valid: false, message: 'Unknown EHR system' };
    }

    // Check if system supports the required features
    const supportedFeatures = this.getSupportedFeatures(system.format);
    
    return {
      valid: true,
      message: `Supports ${supportedFeatures.join(', ')}`
    };
  }

  /**
   * Get supported features for EHR system
   */
  private getSupportedFeatures(format: EHRSystem['format']): string[] {
    switch (format) {
      case 'epic':
        return ['structured notes', 'signatures', 'timestamps', 'metadata'];
      case 'cerner':
        return ['section headers', 'signatures', 'timestamps'];
      case 'allscripts':
        return ['basic formatting', 'signatures'];
      case 'nextgen':
        return ['structured notes', 'signatures', 'timestamps'];
      case 'generic':
        return ['basic formatting'];
      default:
        return ['basic formatting'];
    }
  }
}

// Export singleton instance
export const ehrExportService = new EHRExportService();
