import { useState } from 'react';
import { 
  Copy, 
  Download, 
  Save, 
  Share2, 
  CheckCircle, 
  FileText, 
  File,
  Mail,
  Printer,
  ArrowLeft,
  Shield,
  Clock,
  Zap
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { toast } from 'sonner';

interface MVPExportScreenProps {
  onNavigate: (screen: string) => void;
  noteContent: any;
  selectedTemplate: string;
  onExportComplete: () => void;
}

export function MVPExportScreen({
  onNavigate,
  noteContent,
  selectedTemplate,
  onExportComplete
}: MVPExportScreenProps) {
  const [exportStatus, setExportStatus] = useState<'idle' | 'exporting' | 'success' | 'error'>('idle');
  const [exportedFormat, setExportedFormat] = useState<string>('');

  const formatNoteForExport = () => {
    const timestamp = new Date().toLocaleString();
    const header = `NURSING NOTE - ${selectedTemplate}\nGenerated: ${timestamp}\nGenerated by: NurseScribe AI\n\n`;
    
    let formattedContent = header;
    
    if (selectedTemplate === 'SOAP') {
      formattedContent += `SUBJECTIVE:\n${noteContent.subjective}\n\n`;
      formattedContent += `OBJECTIVE:\n${noteContent.objective}\n\n`;
      formattedContent += `ASSESSMENT:\n${noteContent.assessment}\n\n`;
      formattedContent += `PLAN:\n${noteContent.plan}`;
    } else if (selectedTemplate === 'SBAR') {
      formattedContent += `SITUATION:\n${noteContent.situation}\n\n`;
      formattedContent += `BACKGROUND:\n${noteContent.background}\n\n`;
      formattedContent += `ASSESSMENT:\n${noteContent.assessment}\n\n`;
      formattedContent += `RECOMMENDATION:\n${noteContent.recommendation}`;
    } else if (selectedTemplate === 'PIE') {
      formattedContent += `PROBLEM:\n${noteContent.problem}\n\n`;
      formattedContent += `INTERVENTION:\n${noteContent.intervention}\n\n`;
      formattedContent += `EVALUATION:\n${noteContent.evaluation}`;
    } else if (selectedTemplate === 'DAR') {
      formattedContent += `DATA:\n${noteContent.data}\n\n`;
      formattedContent += `ACTION:\n${noteContent.action}\n\n`;
      formattedContent += `RESPONSE:\n${noteContent.response}`;
    }
    
    return formattedContent;
  };

  const handleCopyToClipboard = async () => {
    setExportStatus('exporting');
    try {
      const formattedNote = formatNoteForExport();
      await navigator.clipboard.writeText(formattedNote);
      setExportStatus('success');
      setExportedFormat('clipboard');
      toast.success('Note copied to clipboard!', {
        description: 'Ready to paste into Epic/Cerner'
      });
      onExportComplete();
    } catch (error) {
      setExportStatus('error');
      toast.error('Failed to copy to clipboard');
    }
  };

  const handleDownloadPDF = () => {
    setExportStatus('exporting');
    try {
      const formattedNote = formatNoteForExport();
      const blob = new Blob([formattedNote], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `nursing_note_${selectedTemplate}_${Date.now()}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      setExportStatus('success');
      setExportedFormat('pdf');
      toast.success('Note downloaded successfully!', {
        description: 'File saved to your device'
      });
      onExportComplete();
    } catch (error) {
      setExportStatus('error');
      toast.error('Failed to download file');
    }
  };

  const handleSaveLocally = () => {
    setExportStatus('exporting');
    try {
      const noteData = {
        id: Date.now(),
        template: selectedTemplate,
        content: noteContent,
        timestamp: new Date().toISOString(),
        exported: true
      };
      
      // Save to localStorage
      const savedNotes = JSON.parse(localStorage.getItem('nursescribe_notes') || '[]');
      savedNotes.push(noteData);
      localStorage.setItem('nursescribe_notes', JSON.stringify(savedNotes));
      
      setExportStatus('success');
      setExportedFormat('local');
      toast.success('Note saved locally!', {
        description: 'Accessible in your note history'
      });
      onExportComplete();
    } catch (error) {
      setExportStatus('error');
      toast.error('Failed to save locally');
    }
  };

  const exportOptions = [
    {
      id: 'clipboard',
      title: 'Copy to Clipboard',
      description: 'Paste directly into Epic, Cerner, or other EHR',
      icon: Copy,
      action: handleCopyToClipboard,
      color: 'bg-primary/10 text-primary border-primary/20',
      popular: true
    },
    {
      id: 'pdf',
      title: 'Download as File',
      description: 'Save as PDF or text file to your device',
      icon: Download,
      action: handleDownloadPDF,
      color: 'bg-secondary/10 text-secondary border-secondary/20',
      popular: false
    },
    {
      id: 'local',
      title: 'Save Locally',
      description: 'Store in app for later access and editing',
      icon: Save,
      action: handleSaveLocally,
      color: 'bg-accent/10 text-accent border-accent/20',
      popular: false
    }
  ];

  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="p-6 pb-4">
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold">Export & Save</h1>
              <p className="text-sm text-muted-foreground">
                Choose how to save your {selectedTemplate} note
              </p>
            </div>
            <Badge className="bg-gradient-primary">
              {selectedTemplate}
            </Badge>
          </div>

          {/* Success Alert */}
          {exportStatus === 'success' && (
            <Alert className="border-success/20 bg-success/10">
              <CheckCircle className="h-4 w-4 text-success" />
              <AlertDescription className="text-success">
                Note exported successfully as {exportedFormat}!
              </AlertDescription>
            </Alert>
          )}

          {/* Error Alert */}
          {exportStatus === 'error' && (
            <Alert variant="destructive">
              <AlertDescription>
                Export failed. Please try again.
              </AlertDescription>
            </Alert>
          )}
        </div>
      </div>

      {/* Export Options */}
      <div className="flex-1 overflow-y-auto px-6 space-y-4">
        {exportOptions.map((option) => {
          const Icon = option.icon;
          return (
            <Card key={option.id} className="p-6 hover:shadow-lg transition-all">
              <div className="flex items-start gap-4">
                <div className={`w-12 h-12 rounded-xl flex items-center justify-center ${option.color}`}>
                  <Icon className="h-6 w-6" />
                </div>
                
                <div className="flex-1 space-y-2">
                  <div className="flex items-center gap-2">
                    <h3 className="text-lg font-semibold">{option.title}</h3>
                    {option.popular && (
                      <Badge className="bg-gradient-primary text-xs">
                        Most Popular
                      </Badge>
                    )}
                  </div>
                  <p className="text-sm text-muted-foreground">
                    {option.description}
                  </p>
                </div>
                
                <Button
                  onClick={option.action}
                  disabled={exportStatus === 'exporting'}
                  className="shrink-0"
                >
                  {exportStatus === 'exporting' ? (
                    <>
                      <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2" />
                      Exporting...
                    </>
                  ) : (
                    <>
                      <Icon className="h-4 w-4 mr-2" />
                      Export
                    </>
                  )}
                </Button>
              </div>
            </Card>
          );
        })}

        {/* Additional Options */}
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4">Additional Options</h3>
          <div className="grid grid-cols-2 gap-3">
            <Button variant="outline" className="h-12">
              <Mail className="h-4 w-4 mr-2" />
              Email Note
            </Button>
            <Button variant="outline" className="h-12">
              <Share2 className="h-4 w-4 mr-2" />
              Share
            </Button>
          </div>
        </Card>
      </div>

      {/* Stats & Actions */}
      <div className="p-6 pt-4 space-y-4">
        {/* Stats */}
        <Card className="p-4">
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>
              <div className="text-2xl font-bold text-primary">15</div>
              <div className="text-xs text-muted-foreground">Min Saved</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-secondary">99%</div>
              <div className="text-xs text-muted-foreground">Accuracy</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-accent">HIPAA</div>
              <div className="text-xs text-muted-foreground">Protected</div>
            </div>
          </div>
        </Card>

        {/* Action Buttons */}
        <div className="space-y-3">
          <Button
            size="lg"
            onClick={() => onNavigate('home')}
            className="w-full h-12 bg-gradient-primary"
          >
            <Zap className="h-4 w-4 mr-2" />
            Start New Note
          </Button>
          
          <div className="text-center">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onNavigate('draft')}
              className="text-muted-foreground"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Draft
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}
