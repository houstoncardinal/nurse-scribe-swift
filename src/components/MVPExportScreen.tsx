import { useState } from 'react';
import { 
  Copy, 
  Download, 
  Save, 
  Share2, 
  CheckCircle, 
  FileText, 
  File,
  Mail,
  Printer,
  ArrowLeft,
  Shield,
  Clock,
  Zap
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { toast } from 'sonner';

interface MVPExportScreenProps {
  onNavigate: (screen: string) => void;
  noteContent: any;
  selectedTemplate: string;
  onExportComplete: () => void;
}

export function MVPExportScreen({
  onNavigate,
  noteContent,
  selectedTemplate,
  onExportComplete
}: MVPExportScreenProps) {
  const [exportStatus, setExportStatus] = useState<'idle' | 'exporting' | 'success' | 'error'>('idle');
  const [exportedFormat, setExportedFormat] = useState<string>('');
  const [showDownloadOptions, setShowDownloadOptions] = useState(false);

  const formatNoteForExport = () => {
    const timestamp = new Date().toLocaleString();
    const header = `NURSING NOTE - ${selectedTemplate}\nGenerated: ${timestamp}\nGenerated by: NurseScribe AI\n\n`;
    
    let formattedContent = header;
    
    if (selectedTemplate === 'SOAP') {
      formattedContent += `SUBJECTIVE:\n${noteContent.subjective}\n\n`;
      formattedContent += `OBJECTIVE:\n${noteContent.objective}\n\n`;
      formattedContent += `ASSESSMENT:\n${noteContent.assessment}\n\n`;
      formattedContent += `PLAN:\n${noteContent.plan}`;
    } else if (selectedTemplate === 'SBAR') {
      formattedContent += `SITUATION:\n${noteContent.situation}\n\n`;
      formattedContent += `BACKGROUND:\n${noteContent.background}\n\n`;
      formattedContent += `ASSESSMENT:\n${noteContent.assessment}\n\n`;
      formattedContent += `RECOMMENDATION:\n${noteContent.recommendation}`;
    } else if (selectedTemplate === 'PIE') {
      formattedContent += `PROBLEM:\n${noteContent.problem}\n\n`;
      formattedContent += `INTERVENTION:\n${noteContent.intervention}\n\n`;
      formattedContent += `EVALUATION:\n${noteContent.evaluation}`;
    } else if (selectedTemplate === 'DAR') {
      formattedContent += `DATA:\n${noteContent.data}\n\n`;
      formattedContent += `ACTION:\n${noteContent.action}\n\n`;
      formattedContent += `RESPONSE:\n${noteContent.response}`;
    }
    
    return formattedContent;
  };

  const handleCopyToClipboard = async () => {
    setExportStatus('exporting');
    try {
      const formattedNote = formatNoteForExport();
      await navigator.clipboard.writeText(formattedNote);
      setExportStatus('success');
      setExportedFormat('clipboard');
      toast.success('Note copied to clipboard!', {
        description: 'Ready to paste into Epic/Cerner'
      });
      onExportComplete();
    } catch (error) {
      setExportStatus('error');
      toast.error('Failed to copy to clipboard');
    }
  };

  const handleDownloadText = () => {
    setExportStatus('exporting');
    try {
      const formattedNote = formatNoteForExport();
      const blob = new Blob([formattedNote], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `nursing_note_${selectedTemplate}_${Date.now()}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      setExportStatus('success');
      setExportedFormat('text');
      setShowDownloadOptions(false);
      toast.success('Text file downloaded successfully!', {
        description: 'File saved to your device'
      });
      onExportComplete();
    } catch (error) {
      setExportStatus('error');
      toast.error('Failed to download text file');
    }
  };

  const handleDownloadPDF = () => {
    setExportStatus('exporting');
    try {
      // Create a simple HTML document for PDF conversion
      const formattedNote = formatNoteForExport();
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>Nursing Note - ${selectedTemplate}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            h1 { color: #2563eb; border-bottom: 2px solid #2563eb; padding-bottom: 10px; }
            .header { background: #f8fafc; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
            .content { white-space: pre-wrap; }
            .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #e2e8f0; font-size: 12px; color: #64748b; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Nursing Note - ${selectedTemplate}</h1>
            <p><strong>Generated:</strong> ${new Date().toLocaleString()}</p>
            <p><strong>Generated by:</strong> NurseScribe AI</p>
          </div>
          <div class="content">${formattedNote.replace(/\n/g, '<br>')}</div>
          <div class="footer">
            <p>This document was generated by NurseScribe AI - HIPAA Compliant Documentation Platform</p>
          </div>
        </body>
        </html>
      `;
      
      const blob = new Blob([htmlContent], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `nursing_note_${selectedTemplate}_${Date.now()}.html`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      setExportStatus('success');
      setExportedFormat('pdf');
      setShowDownloadOptions(false);
      toast.success('PDF document downloaded successfully!', {
        description: 'File saved to your device'
      });
      onExportComplete();
    } catch (error) {
      setExportStatus('error');
      toast.error('Failed to download PDF');
    }
  };

  const handleSaveLocally = () => {
    setExportStatus('exporting');
    try {
      const noteData = {
        id: Date.now(),
        template: selectedTemplate,
        content: noteContent,
        timestamp: new Date().toISOString(),
        exported: true
      };
      
      // Save to localStorage
      const savedNotes = JSON.parse(localStorage.getItem('nursescribe_notes') || '[]');
      savedNotes.push(noteData);
      localStorage.setItem('nursescribe_notes', JSON.stringify(savedNotes));
      
      setExportStatus('success');
      setExportedFormat('local');
      toast.success('Note saved locally!', {
        description: 'Accessible in your note history'
      });
      onExportComplete();
    } catch (error) {
      setExportStatus('error');
      toast.error('Failed to save locally');
    }
  };

  const exportOptions = [
    {
      id: 'clipboard',
      title: 'Copy to Clipboard',
      description: 'Paste directly into Epic, Cerner, or other EHR',
      icon: Copy,
      action: handleCopyToClipboard,
      color: 'bg-primary/10 text-primary border-primary/20',
      popular: true
    },
    {
      id: 'download',
      title: 'Download as File',
      description: 'Save as PDF or text file to your device',
      icon: Download,
      action: () => setShowDownloadOptions(true),
      color: 'bg-secondary/10 text-secondary border-secondary/20',
      popular: false
    },
    {
      id: 'local',
      title: 'Save Locally',
      description: 'Store in app for later access and editing',
      icon: Save,
      action: handleSaveLocally,
      color: 'bg-accent/10 text-accent border-accent/20',
      popular: false
    }
  ];

  return (
    <div className="mvp-app bg-gradient-to-br from-slate-50 via-white to-blue-50/30">
      {/* Mobile-Optimized Compact Header */}
      <div className="lg:hidden flex-shrink-0 p-3 bg-white/90 backdrop-blur-sm border-b border-slate-200">
        <div className="flex items-center justify-between mb-2">
          <div>
            <h1 className="text-lg font-bold text-slate-900">Export & Save</h1>
            <p className="text-xs text-slate-600">
              Choose how to save your {selectedTemplate} note
            </p>
          </div>
          <Badge className="bg-gradient-to-r from-teal-500 to-blue-600 text-white px-2 py-1 text-xs">
            {selectedTemplate}
          </Badge>
        </div>

        {/* Mobile Status Alerts */}
        {exportStatus === 'success' && (
          <Alert className="border-green-200 bg-green-50 py-2">
            <CheckCircle className="h-3 w-3 text-green-600" />
            <AlertDescription className="text-xs text-green-800">
              Note exported as {exportedFormat}!
            </AlertDescription>
          </Alert>
        )}

        {exportStatus === 'error' && (
          <Alert variant="destructive" className="py-2">
            <AlertDescription className="text-xs">
              Export failed. Please try again.
            </AlertDescription>
          </Alert>
        )}
      </div>

      {/* Desktop Header */}
      <div className="hidden lg:block flex-shrink-0 p-4 bg-white/90 backdrop-blur-sm border-b border-slate-200">
        <div className="flex items-center justify-between mb-3">
          <div>
            <h1 className="text-2xl font-bold text-slate-900">Export & Save</h1>
            <p className="text-sm text-slate-600">
              Choose how to save your {selectedTemplate} note
            </p>
          </div>
          <Badge className="bg-gradient-to-r from-teal-500 to-blue-600 text-white px-3 py-1">
            {selectedTemplate}
          </Badge>
        </div>

        {/* Desktop Status Alerts */}
        {exportStatus === 'success' && (
          <Alert className="border-green-200 bg-green-50">
            <CheckCircle className="h-4 w-4 text-green-600" />
            <AlertDescription className="text-green-800">
              Note exported successfully as {exportedFormat}!
            </AlertDescription>
          </Alert>
        )}

        {exportStatus === 'error' && (
          <Alert variant="destructive">
            <AlertDescription>
              Export failed. Please try again.
            </AlertDescription>
          </Alert>
        )}
      </div>

      {/* Export Options - Mobile Optimized */}
      <div className="flex-1 overflow-y-auto px-3 py-2 lg:px-4 lg:py-4 space-y-3 lg:space-y-4 min-h-0">
        {exportOptions.map((option) => {
          const Icon = option.icon;
          return (
            <Card key={option.id} className="p-4 lg:p-6 hover:shadow-lg transition-all">
              <div className="flex items-start gap-3 lg:gap-4">
                <div className={`w-10 h-10 lg:w-12 lg:h-12 rounded-xl flex items-center justify-center ${option.color}`}>
                  <Icon className="h-5 w-5 lg:h-6 lg:w-6" />
                </div>
                
                <div className="flex-1 space-y-1 lg:space-y-2">
                  <div className="flex items-center gap-2">
                    <h3 className="text-base lg:text-lg font-semibold">{option.title}</h3>
                    {option.popular && (
                      <Badge className="bg-gradient-primary text-xs">
                        Popular
                      </Badge>
                    )}
                  </div>
                  <p className="text-xs lg:text-sm text-muted-foreground">
                    {option.description}
                  </p>
                </div>
                
                <Button
                  onClick={option.action}
                  disabled={exportStatus === 'exporting'}
                  className="shrink-0 h-8 lg:h-10"
                  size="sm"
                >
                  {exportStatus === 'exporting' ? (
                    <>
                      <div className="w-3 h-3 lg:w-4 lg:h-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-1 lg:mr-2" />
                      <span className="hidden lg:inline">Exporting...</span>
                      <span className="lg:hidden">...</span>
                    </>
                  ) : (
                    <>
                      <Icon className="h-3 w-3 lg:h-4 lg:w-4 mr-1 lg:mr-2" />
                      <span className="hidden lg:inline">Export</span>
                    </>
                  )}
                </Button>
              </div>
            </Card>
          );
        })}

        {/* Download Options Modal */}
        {showDownloadOptions && (
          <Card className="p-4 lg:p-6 border-2 border-blue-200 bg-blue-50">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-base lg:text-lg font-semibold text-blue-900">Choose Download Format</h3>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowDownloadOptions(false)}
                className="h-6 w-6 p-0 text-blue-600 hover:text-blue-800"
              >
                ×
              </Button>
            </div>
            <div className="grid grid-cols-2 gap-3">
              <Button 
                onClick={handleDownloadText}
                disabled={exportStatus === 'exporting'}
                className="h-12 bg-blue-600 hover:bg-blue-700"
              >
                <FileText className="h-4 w-4 mr-2" />
                <span className="text-sm">Text File</span>
              </Button>
              <Button 
                onClick={handleDownloadPDF}
                disabled={exportStatus === 'exporting'}
                className="h-12 bg-red-600 hover:bg-red-700"
              >
                <File className="h-4 w-4 mr-2" />
                <span className="text-sm">PDF</span>
              </Button>
            </div>
            {exportStatus === 'exporting' && (
              <div className="mt-3 text-center">
                <div className="w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto"></div>
                <p className="text-xs text-blue-600 mt-1">Preparing download...</p>
              </div>
            )}
          </Card>
        )}

        {/* Mobile Additional Options */}
        <Card className="p-4 lg:p-6">
          <h3 className="text-base lg:text-lg font-semibold mb-3 lg:mb-4">Additional Options</h3>
          <div className="grid grid-cols-2 gap-2 lg:gap-3">
            <Button variant="outline" className="h-10 lg:h-12">
              <Mail className="h-3 w-3 lg:h-4 lg:w-4 mr-1 lg:mr-2" />
              <span className="text-xs lg:text-sm">Email</span>
            </Button>
            <Button variant="outline" className="h-10 lg:h-12">
              <Share2 className="h-3 w-3 lg:h-4 lg:w-4 mr-1 lg:mr-2" />
              <span className="text-xs lg:text-sm">Share</span>
            </Button>
          </div>
        </Card>
      </div>

      {/* Mobile-Optimized Actions */}
      <div className="lg:hidden flex-shrink-0 p-3 pb-24 space-y-2 bg-white/90 backdrop-blur-sm border-t border-slate-200">
        <Button
          size="sm"
          onClick={() => onNavigate('home')}
          className="w-full h-9 bg-gradient-to-r from-teal-500 to-blue-600 hover:from-teal-600 hover:to-blue-700"
        >
          <Zap className="h-3 w-3 mr-1" />
          Start New Note
        </Button>
        
        <div className="text-center">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => onNavigate('draft')}
            className="text-xs text-slate-500 hover:text-slate-700 h-7"
          >
            ← Back to Draft
          </Button>
        </div>
      </div>

      {/* Desktop Actions */}
      <div className="hidden lg:block flex-shrink-0 p-4 space-y-3 bg-white/90 backdrop-blur-sm border-t border-slate-200">
        <Button
          size="lg"
          onClick={() => onNavigate('home')}
          className="w-full h-11 bg-gradient-to-r from-teal-500 to-blue-600 hover:from-teal-600 hover:to-blue-700"
        >
          <Zap className="h-4 w-4 mr-2" />
          Start New Note
        </Button>
        
        <div className="text-center">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => onNavigate('draft')}
            className="text-slate-500 hover:text-slate-700"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Draft
          </Button>
        </div>
      </div>
    </div>
  );
}
